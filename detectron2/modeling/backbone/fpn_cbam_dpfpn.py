# iterative out_convs size is modified in FPN
# Copyright (c) Facebook, Inc. and its affiliates.
import math
import fvcore.nn.weight_init as weight_init
import torch.nn.functional as F
from torch import nn

from detectron2.layers import Conv2d, ShapeSpec, get_norm

from .backbone import Backbone
from .build import BACKBONE_REGISTRY
from .resnet import build_resnet_backbone
import torch.nn as nn

from .cbam import *

__all__ = ["build_resnet_fpn_backbone", "build_retinanet_resnet_fpn_backbone", "FPN"]


class FPN(Backbone):

    """
    This module implements :paper:`FPN`.
    It creates pyramid features built on top of some input feature maps.
    """

    def __init__(
        self, bottom_up, in_features, out_channels, norm="", top_block=None, fuse_type="sum"
    ):
        """
        Args:
            bottom_up (Backbone): module representing the bottom up subnetwork.
                Must be a subclass of :class:`Backbone`. The multi-scale feature
                maps generated by the bottom up network, and listed in `in_features`,
                are used to generate FPN levels.
            in_features (list[str]): names of the input feature maps coming
                from the backbone to which FPN is attached. For example, if the
                backbone produces ["res2", "res3", "res4"], any *contiguous* sublist
                of these may be used; order must be from high to low resolution.
            out_channels (int): number of channels in the output feature maps.
            norm (str): the normalization to use.
            top_block (nn.Module or None): if provided, an extra operation will
                be performed on the output of the last (smallest resolution)
                FPN output, and the result will extend the result list. The top_block
                further downsamples the feature map. It must have an attribute
                "num_levels", meaning the number of extra FPN levels added by
                this block, and "in_feature", which is a string representing
                its input feature (e.g., p5).
            fuse_type (str): types for fusing the top down features and the lateral
                ones. It can be "sum" (default), which sums up element-wise; or "avg",
                which takes the element-wise mean of the two.
        """
        super(FPN, self).__init__()
        assert isinstance(bottom_up, Backbone)
        assert in_features, in_features

        # Feature map strides and channels from the bottom up network (e.g. ResNet)
        input_shapes = bottom_up.output_shape()
        strides = [input_shapes[f].stride for f in in_features]
        in_channels_per_feature = [input_shapes[f].channels for f in in_features]

        _assert_strides_are_log2_contiguous(strides)
        lateral_convs = []
        output_convs = []

        use_bias = norm == ""
        nlayers = len(in_channels_per_feature)
        for idx, in_channels in enumerate(in_channels_per_feature):

            stage = int(math.log2(strides[idx]))

            if idx!=3:
                output_norm = get_norm(norm, out_channels)          
                output_conv = Conv2d(
                    out_channels*(nlayers-idx),
                    out_channels,
                    kernel_size=3,
                    stride=1,
                    padding=1,
                    bias=use_bias,
                    norm=output_norm,
                )
                weight_init.c2_xavier_fill(output_conv)
                self.add_module("fpn_output{}".format(stage), output_conv)
                output_convs.append(output_conv)


            lateral_norm = get_norm(norm, out_channels)
            lateral_conv = Conv2d(
                in_channels, out_channels, kernel_size=1, bias=use_bias, norm=lateral_norm
            )
            weight_init.c2_xavier_fill(lateral_conv)
            self.add_module("fpn_lateral{}".format(stage), lateral_conv)
            lateral_convs.append(lateral_conv)



            
        

        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        self.lateral_convs = lateral_convs[::-1]
        self.output_convs = output_convs[::-1]
        self.top_block = top_block
        self.in_features = in_features
        self.bottom_up = bottom_up
        # Return feature names are "p<stage>", like ["p2", "p3", ..., "p6"]
        self._out_feature_strides = {"p{}".format(int(math.log2(s))): s for s in strides}
        # top block output feature maps.
        if self.top_block is not None:
            for s in range(stage, stage + self.top_block.num_levels):
                self._out_feature_strides["p{}".format(s + 1)] = 2 ** (s + 1)

        self._out_features = list(self._out_feature_strides.keys())
        self._out_feature_channels = {k: out_channels for k in self._out_features}
        self._size_divisibility = strides[-1]
        assert fuse_type in {"avg", "sum"}
        self._fuse_type = fuse_type

        # Scripting does not support this: https://github.com/pytorch/pytorch/issues/47334
        # have to do it in __init__ instead.
        self.rev_in_features = tuple(in_features[::-1])

        self.createAttentionBlocks()

    @property
    def size_divisibility(self):
        return self._size_divisibility
    







    def createAttentionBlocks(self):

        self.base_dim = 256
        self.CBAM54 = CBAM(256*1)
        self.CBAM43 = CBAM(256*2)
        self.CBAM32 = CBAM(256*3)


        # self.add_module("CBAM54", self.CBAM54)
        # self.add_module("CBAM43", self.CBAM43)
        # self.add_module("CBAM32", self.CBAM32)


        # self.P5_2x   = nn.ConvTranspose2d(256, 256, kernel_size=2, stride=2)
        # self.P5_4x   = nn.ConvTranspose2d(256, 256, kernel_size=2, stride=2)
        # self.P5_8x   = nn.ConvTranspose2d(256, 256, kernel_size=2, stride=2)


        # self.P4_2x   = nn.ConvTranspose2d(256, 256, kernel_size=2, stride=2)
        # self.P4_4x   = nn.ConvTranspose2d(256, 256, kernel_size=2, stride=2)

        # self.P3_2x   = nn.ConvTranspose2d(256, 256, kernel_size=2, stride=2)




    def forward(self, x):


        bottom_up_features = self.bottom_up(x)
        results = []
        # prev_features = self.lateral_convs[0](bottom_up_features[self.in_features[-1]])


        # C5in = self.lateral_convs[0](bottom_up_features[self.in_features[-1]])
        # results.append(self.output_convs[0](prev_features))
        # print(self.in_features[-1])
        # quit()

        # C5 = self.lateral_convs[0](bottom_up_features['res5'])
        C4 = self.lateral_convs[1](bottom_up_features['res4'])
        C3 = self.lateral_convs[2](bottom_up_features['res3'])
        C2 = self.lateral_convs[3](bottom_up_features['res2'])

        # Reverse feature maps into top-down order (from low to high resolution)

        # self.rev_in_features = ('res5', 'res4', 'res3', 'res2')

        # print(self.lateral_convs) = [Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1)), Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1)), Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1)), Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))]

        # print(self.output_convs) = [Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]

        # Has to use explicit forward due to https://github.com/pytorch/pytorch/issues/47336

        # print(self.lateral_convs)
        # print(self.output_convs) 
        # quit()
        # self.createAttentionBlocks()
        # P5      = self.output_convs[0](C5)
        # P5      = self.lateral_convs[0](bottom_up_features['res5'])

        P5      = self.lateral_convs[0](bottom_up_features['res5'])



        P5_2x   = F.interpolate(P5, scale_factor=2.0, mode="bilinear")
        P5_4x   = F.interpolate(P5, scale_factor=4.0, mode="bilinear")
        P5_8x   = F.interpolate(P5, scale_factor=8.0, mode="bilinear")
        
 
        P4A     = self.CBAM54(P5_2x)
        P4out   = torch.cat((C4, P4A), dim=1)

        P4      = self.output_convs[0](P4out)
        P4_2x   = F.interpolate(P4, scale_factor=2.0, mode="bilinear")
        P4_4x   = F.interpolate(P4, scale_factor=4.0, mode="bilinear")

        P3_cat  = torch.cat((P4_2x,P5_4x), dim=1)
        P3A     = self.CBAM43(P3_cat)
        P3out   = torch.cat((C3, P3A), dim=1)
        P3      = self.output_convs[1](P3out)
        P3_2x   = F.interpolate(P3, scale_factor=2.0, mode="bilinear")

        P2_cat  = torch.cat((P3_2x, P4_4x, P5_8x), dim=1)
        P2A     = self.CBAM32(P2_cat)
        P2out   = torch.cat((C2, P2A),dim=1)
        P2      = self.output_convs[2](P2out)






        
        # bottom_up_features = self.bottom_up(x)
        # results = []
        # # prev_features = self.lateral_convs[0](bottom_up_features[self.in_features[-1]])


        # # C5in = self.lateral_convs[0](bottom_up_features[self.in_features[-1]])
        # # results.append(self.output_convs[0](prev_features))
        # # print(self.in_features[-1])
        # # quit()

        # # C5 = self.lateral_convs[0](bottom_up_features['res5'])
        # C4 = self.lateral_convs[1](bottom_up_features['res4'])
        # C3 = self.lateral_convs[2](bottom_up_features['res3'])
        # C2 = self.lateral_convs[3](bottom_up_features['res2'])


        
        # # P5      = self.output_convs[0](C5)
        # # P5      = self.lateral_convs[0](bottom_up_features['res5'])

        # P5      = self.lateral_convs[0](bottom_up_features['res5'])



        # P5_2x   = self.P5_2x(P5)
        # P5_4x   = self.P5_4x(P5_2x)
        # P5_8x   = self.P5_8x(P5_4x)
        
 
        # P4A     = self.CBAM54(P5_2x)
        # P4out   = torch.cat((C4, P4A), dim=1)

        # P4      = self.output_convs[0](P4out)
        # P4_2x   = self.P4_2x(P4)
        # P4_4x   = self.P4_4x(P4_2x)

        # P3_cat  = torch.cat((P4_2x,P5_4x), dim=1)
        # P3A     = self.CBAM43(P3_cat)
        # P3out   = torch.cat((C3, P3A), dim=1)
        # P3      = self.output_convs[1](P3out)
        # P3_2x   = self.P3_2x(P3)
        # P2_cat  = torch.cat((P3_2x, P4_4x, P5_8x), dim=1)
        # P2A     = self.CBAM32(P2_cat)
        # P2out   = torch.cat((C2, P2A),dim=1)
        # P2      = self.output_convs[2](P2out)
    






        # results.append(self.output_convs[0](prev_features))
        results.append(P5) #or self.output_convs[0](C5)
        results.insert(0, P4)
        results.insert(0, P3)
        results.insert(0, P2)





        if self.top_block is not None:
            if self.top_block.in_feature in bottom_up_features:
                top_block_in_feature = bottom_up_features[self.top_block.in_feature]
            else:
                top_block_in_feature = results[self._out_features.index(self.top_block.in_feature)]
            results.extend(self.top_block(top_block_in_feature))
        assert len(self._out_features) == len(results)


        return dict(list(zip(self._out_features, results)))
    



    def output_shape(self):
        return {
            name: ShapeSpec(
                channels=self._out_feature_channels[name], stride=self._out_feature_strides[name]
            )
            for name in self._out_features
        }


def _assert_strides_are_log2_contiguous(strides):
    """
    Assert that each stride is 2x times its preceding stride, i.e. "contiguous in log2".
    """
    for i, stride in enumerate(strides[1:], 1):
        assert stride == 2 * strides[i - 1], "Strides {} {} are not log2 contiguous".format(
            stride, strides[i - 1]
        )


class LastLevelMaxPool(nn.Module):
    """
    This module is used in the original FPN to generate a downsampled
    P6 feature from P5.
    """

    def __init__(self):
        super().__init__()
        self.num_levels = 1
        self.in_feature = "p5"

    def forward(self, x):
        return [F.max_pool2d(x, kernel_size=1, stride=2, padding=0)]


class LastLevelP6P7(nn.Module):
    """
    This module is used in RetinaNet to generate extra layers, P6 and P7 from
    C5 feature.
    """

    def __init__(self, in_channels, out_channels, in_feature="res5"):
        super().__init__()
        self.num_levels = 2
        self.in_feature = in_feature
        self.p6 = nn.Conv2d(in_channels, out_channels, 3, 2, 1)
        self.p7 = nn.Conv2d(out_channels, out_channels, 3, 2, 1)
        for module in [self.p6, self.p7]:
            weight_init.c2_xavier_fill(module)

    def forward(self, c5):
        p6 = self.p6(c5)
        p7 = self.p7(F.relu(p6))
        return [p6, p7]


@BACKBONE_REGISTRY.register()
def build_resnet_fpn_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    backbone = FPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        top_block=LastLevelMaxPool(),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone


@BACKBONE_REGISTRY.register()
def build_retinanet_resnet_fpn_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    in_channels_p6p7 = bottom_up.output_shape()["res5"].channels
    backbone = FPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        top_block=LastLevelP6P7(in_channels_p6p7, out_channels),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone
